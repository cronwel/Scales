Last place status code



mkdir projectname
cd projectname


virtualenv venv -p python3.6

- venv = variablename, venv be anything


//activation
source venv/bin/activate
//deactivation
deactivate

pip install django

django-admin startproject projectname

///creates
manage
__init__
settings
urls
wsgi
//

python manage.py runserver

django-admin startapp appname //appname is variable

-------------------------------------
Model Creation
-------------------------------------
Users
- Automatic from-
  - from django.contrib.auth.models import User

Board
  name = models.CharField(max_length=30, unique=True)
  description = models.CharField(max_length=100)

Concepts-From Ruby
------------
Similar to Rails
 -
 Rails uses command line to create models
 rails g model Board name:string description:text

 Django uses models.py to create models

-----------------------------------
Model Migration
-----------------------------------

Migration in Ruby

rake db:migrate
- creates migration file
- creates database


Migration in Django

python manage.py makemigrations

creates migration file

python manage.py migrate
----------------------------------
Tools
----------------------------------
Django
python manage.py shell
- makes Django app available through command line
adds project to sys.path
-
Ruby
irb
- makes rails app available through command line
----------------------------------
Using shell
----------------------------------
Django
from boards.models import Board

board = Board(name='Django', description='information about this board')

board.save()
----------------------------------
Model name in shell
----------------------------------
Django
class Board......
  name = ....
  description = .......

  def __str__(self):
      return self.name

------Purpose---------------------
When you pull up Boards in console, previously unavailable as named boards.
Now, code above allows names to be shown in shell

example:
Board.objects.all()

>>> <QuerySet [<Board: Django>, <Board: Python>]>

This allows for it to display better in a list
--------------------------------------
Templates
--------------------------------------
Django
- manual creation
mkdir templates
Ruby
automatically installed as part of app
--------------------------------------
Syntax
--------------------------------------
Django
{% enter code here %}
Ruby
<% enter code here %>
--------------------------------------
Tests
--------------------------------------
Django
- tests easy to implement
- Built in to Django

Ruby
- Requires gem(depending on type of test)
GEMS:
- rspec
- guard
- rspec-**
- rubocop


python manage.py test

options
python manage.py test --verbosity=2
Options
- 0= no output
- 1= normal output
- 2= verbose output

-------------------------------------
Folder/Directory setup
-------------------------------------
mkdir in main dir
mkdir static

settings.py
-
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],

os.path.join(BASE_DIR, 'templates'
Add to the directories that Django will now recognize as being legit

template directory created
setting.py modified
templates/home.html to be modified as below

{% load static %}

<!DOCTYPE html>
<html>
    .....
    ...
    ......
    href="{% static 'css/bootstrap.min.css' %}">
    .........
    ....

</html>


loads the static directory
css code can be interpolated
-------------------------------
Admin
-------------------------------
creating admin

python manage.py createsuperuse

fill out content

-------------------------------
Model in views
-------------------------------

boards.admin.py

from django.contrib import admin
from .models import Board

admin.site.register(Board)
